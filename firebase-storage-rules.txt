rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Allow avatar uploads for authenticated users
    match /avatars/{userId} {
      allow read: if true;  // Anyone can view avatars
      allow write: if isAuthenticated() && request.auth.uid == userId;  // Only the user can update their own avatar
    }

    // Allow public read access to cover images and previews
    match /covers/{fileName} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    match /previews/{fileName} {
      allow read: if true;
      allow write: if request.auth != null;
    }

    // Media files access
    match /uploads/{type}/{fileName} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (
          (type == "books" && request.resource.contentType == "application/pdf") ||
          (type == "videos" && request.resource.contentType.matches('video/.*'))
        );
    }

    // Forum post images
    match /posts/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
        request.resource.contentType.matches('image/.*') &&
        request.resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // Allow post image uploads for authenticated users in user-specific folders
    match /posts/{userId}/{fileName} {
      allow read: if true;
      allow write: if isAuthenticated() && 
        request.auth.uid == userId && 
        request.resource.contentType.matches('image/.*');
    }

    match /{allPaths=**} {
      allow read: if request.auth != null;
    }
  }
}